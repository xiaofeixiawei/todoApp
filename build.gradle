import org.gradle.api.tasks.Optional

apply plugin: 'war'

repositories {
    mavenCentral()
}
dependencies {

    providedCompile 'javax.servlet:servlet-api:2.5',
            'javax.servlet.jsp:jsp-api:2.1'
    runtime 'javax.servlet:jstl:1.1.2',
            'taglibs:standard:1.1.2'
}



//=============================配置项目发布版本============================
class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    @Override
    String toString() {
        return "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}

ext.versionFile = file('version.properties') //要在写在loadVersion配置前
//task配置
task loadVersion {
    group = 'version'
    description = '加载版本信息文件来配置版本号'
    def version = readVersion()
    logger.quiet "当前生成版本为${project.name}-${version}"
    project.version = version
}

ProjectVersion readVersion() {
    logger.quiet '开始读取版本信息文件'
    if (!versionFile.exists()) {
        throw new GradleException("版本信息文件[${versionFile.path}]不存在")
    }
    Properties versionProp = new Properties()
    versionFile.withInputStream { stream ->
        versionProp.load(stream)
    }
    new ProjectVersion(major: versionProp.major as Integer, minor: versionProp.minor as Integer, release: versionProp.release.toBoolean())
}

//task makeReleaseVersion {
//    group = 'version'
//    description = 'Makes project a release version'
//    inputs.property 'release', version.release
//    outputs.file versionFile
//    doLast {
//        project.version.release = true
//        ant.propertyfile(file: versionFile) {
//            entry(key: 'release', value: 'true') //同时同步版本信息文件
//        }
//    }
//}

//自定义task类型
class ReleaseVersionTask extends DefaultTask {
    //使用注解@Input、@OutputFile声明task的输入\输出，也可以使用默认的输入\输出(inputs\outputs)。@Input注解在配置期间验证属性值，如果为null抛出异常，所以需要添加@Optional
    @Optional
    @Input
    Boolean release
    @OutputFile
    File destFile

    //使用注解声明task的执行方法
    @TaskAction
    void action(){
        project.version.release = true
        ant.propertyfile(file: destFile) {
            entry(key: 'release', value: 'true') //同时同步版本信息文件
        }
    }
}
//增强task
task makeReleaseVersion(type: ReleaseVersionTask) {
    group = 'version'
    description = 'Makes project a release version'
    release = project.version.release
    destFile = versionFile
//    inputs.property 'release', version.release
//    outputs.file versionFile
}

task mockPublish(group:'publish', description:'模拟发布，测试makeReleaseVersion') {
    dependsOn makeReleaseVersion, war
    doLast {
        logger.quiet '模拟发布项目'
    }
}


//=========================gradle内置task类型使用，Zip、Copy==================
task createDistribution(type: Zip, dependsOn: makeReleaseVersion) {
    archiveName = 'todoAPP.zip' //默认是['项目名'-'版本号'.zip]
    //把ar task的输出文件打包到压缩包的根目录下；引用ar task的输出，默认就依赖了war task
    from(war.outputs.files)
    //把源码打包到压缩包的'src'目录下
    from(sourceSets*.allSource) {
        into 'src'
    }
    //把项目根路径下的版本信息文件打包到压缩包的根目录下
    from(rootDir) {
        include versionFile.name
    }
}
task backupReleaseDistribution(type: Copy) {
    from(createDistribution.outputs.files)
    into "$buildDir/backup"
}


//==========================gretty插件的使用============================
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.akhikhl.gretty:gretty:1.4.2'
    }
}
apply plugin: 'org.akhikhl.gretty'
gretty {
    httpPort = 8081 //设置访问端口
    contextPath = 'todo' //设置上下文路径
}


